"""
This file is meant to analyze the output, generated by the biLouvain algorithm.
"""
import os
import matplotlib.pyplot as plt

output_files = os.listdir("output")

def string_to_float(string: str) -> float:
    """Used to translate the header string floats back to normal floats."""
    return float(string.replace('p', '.'))

def readout_modularity_file(file_name: str) -> list:
    name_parts = file_name.split('\uf00d')[0].split('Ct')[1].split('Cp')
    iteration_cutoff_value = string_to_float(name_parts[0])
    phase_cutoff_value = string_to_float(name_parts[1])

    modularity_file = open(f"output/{file_name}", encoding="utf-8-sig").read().splitlines()
    modularity_value = float(modularity_file[-1].split(' ')[-1])
    return [iteration_cutoff_value, phase_cutoff_value, modularity_value]

# Reading the modularities
output_data = []
for file_name in output_files:
    if file_name[-21:] == "ResultsModularity.txt":
        output_data.append(readout_modularity_file(file_name))


# TODO: modularity uitlezen

header = ["Iteration cutoff", "Phase cutoff", "Murata+ Modularity", "Willen we hier nog meer?"]


#%% Graphs %%#
print(list(enumerate(header))) # zodat je makkelijk kan zien welke index je nodig hebt


# Given a phase_cutoff, make a line graph with the iteration cutoff on the x-axis, and Murata+ on the y-axis.
def make_line_plot(phase_cutoff: float) -> None:
    # Filter to keep only the data with given phase cutoff.
    filtered_data = list(filter(lambda item: (item[1] == phase_cutoff), output_data))
    x_data = [item[0] for item in filtered_data]
    y_data = [item[2] for item in filtered_data]
    plt.plot(x_data, y_data)
    plt.xlabel("Iteration cutoff")
    plt.ylabel("Murata+ modularity")
    # @Yanna, kan je weer zorgen voor dezelfde yticks?
    plt.title("Murata+ modularity per iteration cutoff, with phase cutoff of " + str(phase_cutoff))
    plt.show(dpi=360)


# Graph 1: phase cutoff = 0.0
make_line_plot(0.0)

# Graph 2: phase cutoff = 0.001
make_line_plot(0.001)

#%% LaTeX Table %%#
table_name = "output/table_LaTeX.txt"
if os.path.exists(table_name):
    os.remove(table_name)

table = open(table_name, "a")
table.write("\\begin{tabular}{ c c c }\n")
table.write("\\hline\n")
# header
table.write("Iteration cutoff & Phase cutoff & Murata+ modularity \\\\\n")
table.write("\\hline\n")
#body
# foreach scenario
for line in output_data:
    table.write(f"{line[0]} & {line[1]} & {line[2]}  \\\\\n")
    #table.write("\\hline\n")

table.write("\\hline\n")
table.write("\\end{tabular}\n")
table.close()
